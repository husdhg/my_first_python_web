base.html
<!--g 在模板中自动可用。 根据 g.user 是否被设置（在 load_logged_in_user 中进行），要么显示 用户名和注销连接，要么显示注册和登录连接。
  url_for() 也是自动可用的，可用于生成视图的 URL ，而不用手动来指定。-->
  <!--在标题下面，正文内容前面，模板会循环显示 get_flashed_messages() 返回 的每个消息。
  在视图中使用 flash() 来处理出错信息，在模板中就可以这样 显示出出来。-->
  <!--模板中定义三个块，这些块会被其他模板重载。-->
  <!--{% block title %} 会改变显示在浏览器标签和窗口中的标题。-->
  <!--{% block header %} 类似于 title ，但是会改变页面的标题。-->
  <!--{% block content %} 是每个页面的具体内容，如登录表单或者博客帖子。-->
  <!--其他模板直接放在 templates 文件夹内。为了更好地管理文件，属于某个蓝图 的模板会被放在与蓝图同名的文件夹内。
   base.html 模板已经使用了一个 style.css 文件连接：
{{ url_for('static', filename='style.css') }}
除了 CSS ，其他类型的静态文件可以是 JavaScript 函数文件或者 logo 图片。
它们 都放置于 flaskr/static 文件夹中，并使用 url_for('static', filename='...') 引用。-->

update.html
<!--这个模板有两个表单。第一个提交已编辑过的数据给当前页面（ /<id>/update ）。
另一个表单只包含一个按钮。它指定一个 action 属性，指向删除视图。这个按钮 使用了一些 JavaScript 用以在提交前显示一个确认对话框。-->
<!--参数 {{ request.form['title'] or post['title'] }} 用于选择在表单显示什么 数据。
当表单还未提交时，显示原 post 数据。但是，如果提交了非法数据，然后 需要显示这些非法数据以便于用户修改时，就显示 request.form 中的数据。
request 是又一个自动在模板中可用的变量。-->

register.html
<!--{% extends 'base.html' %} 告诉 Jinja 这个模板基于基础模板，并且需要替换 相应的块。所有替换的内容必须位于 {% block %} 标签之内。-->
<!--一个实用的模式是把 {% block title %} 放在 {% block header %} 内部。 这里不但可以设置 title 块，还可以把其值作为 header 块的内容， 一举两得。-->
<!--input 标记使用了 required 属性。这是告诉浏览器这些字段是必填的。
如果用户使用不支持这个属性的旧版浏览器或者不是浏览器的东西创建的请求， 那么你还是要在视图中验证输入数据。
总是在服务端中完全验证数据，即使客户端 已经做了一些验证，这一点非常重要。-->